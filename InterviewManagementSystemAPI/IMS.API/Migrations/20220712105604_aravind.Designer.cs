// <auto-generated />
using System;
using IMS.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Source.Migrations
{
    [DbContext(typeof(InterviewManagementSystemDbContext))]
    [Migration("20220712105604_aravind")]
    partial class aravind
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IMS.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = ".NET",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "JAVA",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "ORACLE",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentName = "LAMP",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 5,
                            DepartmentName = "BFS",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 6,
                            DepartmentName = "TAC",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 7,
                            DepartmentName = "ADMIN",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("IMS.Models.Drive", b =>
                {
                    b.Property<int>("DriveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriveId"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ModeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PoolId")
                        .HasColumnType("int");

                    b.Property<double>("SlotTiming")
                        .HasColumnType("float");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("DriveId");

                    b.HasIndex("AddedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PoolId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Drives");

                    b.HasData(
                        new
                        {
                            DriveId = 1,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2103),
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2085),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 1,
                            ModeId = 2,
                            Name = "Freshers .Net Drive T",
                            PoolId = 1,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 13, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2098),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2106)
                        },
                        new
                        {
                            DriveId = 2,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2109),
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 15, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2107),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 1,
                            ModeId = 2,
                            Name = "Freshers .Net Drive S",
                            PoolId = 1,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 16, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2108),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2110)
                        },
                        new
                        {
                            DriveId = 3,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2112),
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 18, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2110),
                            IsCancelled = false,
                            IsScheduled = false,
                            LocationId = 1,
                            ModeId = 2,
                            Name = "Freshers .Net Drive U",
                            PoolId = 1,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 19, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2111),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2112)
                        },
                        new
                        {
                            DriveId = 4,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2114),
                            CancelReason = "Cancelled For Testing",
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2113),
                            IsCancelled = true,
                            IsScheduled = true,
                            LocationId = 1,
                            ModeId = 2,
                            Name = "Freshers .Net Drive C",
                            PoolId = 1,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 13, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2113),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2115)
                        },
                        new
                        {
                            DriveId = 5,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2117),
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2116),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 9,
                            ModeId = 1,
                            Name = "SSE .Net Drive T",
                            PoolId = 2,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2116),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2117)
                        },
                        new
                        {
                            DriveId = 6,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2120),
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 15, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2118),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 3,
                            ModeId = 2,
                            Name = "SSE .Net Drive S",
                            PoolId = 2,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2119),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2120)
                        },
                        new
                        {
                            DriveId = 7,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2122),
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 18, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2121),
                            IsCancelled = false,
                            IsScheduled = false,
                            LocationId = 9,
                            ModeId = 1,
                            Name = "SSE .Net Drive U",
                            PoolId = 2,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2121),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2123)
                        },
                        new
                        {
                            DriveId = 8,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2125),
                            CancelReason = "Cancelled For Testing",
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2124),
                            IsCancelled = true,
                            IsScheduled = true,
                            LocationId = 9,
                            ModeId = 1,
                            Name = "SSE .Net Drive C",
                            PoolId = 2,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2124),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2125)
                        },
                        new
                        {
                            DriveId = 9,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2127),
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2126),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 9,
                            ModeId = 1,
                            Name = "SLO .Net Drive T",
                            PoolId = 2,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 13, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2126),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2129)
                        },
                        new
                        {
                            DriveId = 10,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2131),
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 15, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2130),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 5,
                            ModeId = 2,
                            Name = "SLO .Net Drive S",
                            PoolId = 2,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 16, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2130),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2132)
                        },
                        new
                        {
                            DriveId = 11,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2134),
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 18, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2132),
                            IsCancelled = false,
                            IsScheduled = false,
                            LocationId = 5,
                            ModeId = 2,
                            Name = "SLO .Net Drive U",
                            PoolId = 2,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 19, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2133),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2134)
                        },
                        new
                        {
                            DriveId = 12,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2136),
                            CancelReason = "Cancelled For Testing",
                            DepartmentId = 1,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2135),
                            IsCancelled = true,
                            IsScheduled = true,
                            LocationId = 5,
                            ModeId = 1,
                            Name = "SLO .Net Drive C",
                            PoolId = 2,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 13, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2136),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2137)
                        },
                        new
                        {
                            DriveId = 13,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2139),
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2138),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 1,
                            ModeId = 2,
                            Name = "Freshers JAVA Drive T",
                            PoolId = 4,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 13, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2138),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2140)
                        },
                        new
                        {
                            DriveId = 14,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2142),
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 15, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2141),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 1,
                            ModeId = 2,
                            Name = "Freshers JAVA Drive S",
                            PoolId = 4,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 16, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2141),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2142)
                        },
                        new
                        {
                            DriveId = 15,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2146),
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 18, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2143),
                            IsCancelled = false,
                            IsScheduled = false,
                            LocationId = 1,
                            ModeId = 2,
                            Name = "Freshers JAVA Drive U",
                            PoolId = 4,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 19, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2144),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2146)
                        },
                        new
                        {
                            DriveId = 16,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2148),
                            CancelReason = "Cancelled For Testing",
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2147),
                            IsCancelled = true,
                            IsScheduled = true,
                            LocationId = 1,
                            ModeId = 2,
                            Name = "Freshers JAVA Drive C",
                            PoolId = 4,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 13, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2147),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2149)
                        },
                        new
                        {
                            DriveId = 17,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2172),
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2171),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 9,
                            ModeId = 1,
                            Name = "SSE JAVA Drive T",
                            PoolId = 5,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2171),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2173)
                        },
                        new
                        {
                            DriveId = 18,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2175),
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 15, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2174),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 3,
                            ModeId = 2,
                            Name = "SSE JAVA Drive S",
                            PoolId = 5,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2175),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2176)
                        },
                        new
                        {
                            DriveId = 19,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2178),
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 18, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2177),
                            IsCancelled = false,
                            IsScheduled = false,
                            LocationId = 9,
                            ModeId = 1,
                            Name = "SSE JAVA Drive U",
                            PoolId = 5,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2177),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2178)
                        },
                        new
                        {
                            DriveId = 20,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2180),
                            CancelReason = "Cancelled For Testing",
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2179),
                            IsCancelled = true,
                            IsScheduled = true,
                            LocationId = 9,
                            ModeId = 1,
                            Name = "SSE JAVA Drive C",
                            PoolId = 5,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2180),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2181)
                        },
                        new
                        {
                            DriveId = 21,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2183),
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2182),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 9,
                            ModeId = 1,
                            Name = "SLO JAVA Drive T",
                            PoolId = 6,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 13, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2182),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2183)
                        },
                        new
                        {
                            DriveId = 22,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2186),
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 15, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2184),
                            IsCancelled = false,
                            IsScheduled = true,
                            LocationId = 5,
                            ModeId = 2,
                            Name = "SLO JAVA Drive S",
                            PoolId = 6,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 16, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2185),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2186)
                        },
                        new
                        {
                            DriveId = 23,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2188),
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 18, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2187),
                            IsCancelled = false,
                            IsScheduled = false,
                            LocationId = 5,
                            ModeId = 2,
                            Name = "SLO JAVA Drive U",
                            PoolId = 6,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 19, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2187),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2189)
                        },
                        new
                        {
                            DriveId = 24,
                            AddedBy = 10,
                            AddedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2191),
                            CancelReason = "Cancelled For Testing",
                            DepartmentId = 2,
                            FromDate = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2190),
                            IsCancelled = true,
                            IsScheduled = true,
                            LocationId = 5,
                            ModeId = 1,
                            Name = "SLO JAVA Drive C",
                            PoolId = 6,
                            SlotTiming = 0.0,
                            ToDate = new DateTime(2022, 7, 13, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2190),
                            UpdatedBy = 9,
                            UpdatedOn = new DateTime(2022, 7, 12, 16, 26, 4, 173, DateTimeKind.Local).AddTicks(2192)
                        });
                });

            modelBuilder.Entity("IMS.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeAceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdminAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdminResponded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            DepartmentId = 1,
                            EmailId = "prithvi.palani@aspiresys.com",
                            EmployeeAceNumber = "ACE0001",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Prithvi",
                            Password = "Pass@12345",
                            ProjectId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            EmployeeId = 2,
                            DepartmentId = 1,
                            EmailId = "vinoth.jayakumar@aspiresys.com",
                            EmployeeAceNumber = "ACE0002",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Vinoth",
                            Password = "Pass@12345",
                            ProjectId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            EmployeeId = 3,
                            DepartmentId = 1,
                            EmailId = "sheik.farid@aspiresys.com",
                            EmployeeAceNumber = "ACE0003",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Sheik",
                            Password = "Pass@12345",
                            ProjectId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            EmployeeId = 4,
                            DepartmentId = 2,
                            EmailId = "darshana@aspiresys.com",
                            EmployeeAceNumber = "ACE0004",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Darshana",
                            Password = "Pass@12345",
                            ProjectId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            EmployeeId = 5,
                            DepartmentId = 2,
                            EmailId = "aravind@aspiresys.com",
                            EmployeeAceNumber = "ACE0005",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Aravind",
                            Password = "Pass@12345",
                            ProjectId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            EmployeeId = 6,
                            DepartmentId = 2,
                            EmailId = "kumaresh@aspiresys.com",
                            EmployeeAceNumber = "ACE0006",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Kumaresh",
                            Password = "Pass@12345",
                            ProjectId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            EmployeeId = 7,
                            DepartmentId = 3,
                            EmailId = "gokul@aspiresys.com",
                            EmployeeAceNumber = "ACE0007",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Gokul",
                            Password = "Pass@12345",
                            ProjectId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            EmployeeId = 8,
                            DepartmentId = 3,
                            EmailId = "deepika@aspiresys.com",
                            EmployeeAceNumber = "ACE0008",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Deepika",
                            Password = "Pass@12345",
                            ProjectId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            EmployeeId = 9,
                            DepartmentId = 3,
                            EmailId = "remuki@aspiresys.com",
                            EmployeeAceNumber = "ACE0009",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Remuki",
                            Password = "Pass@12345",
                            ProjectId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            EmployeeId = 10,
                            DepartmentId = 6,
                            EmailId = "vishnu@aspiresys.com",
                            EmployeeAceNumber = "ACE0010",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Vishnu",
                            Password = "Pass@12345",
                            ProjectId = 4,
                            RoleId = 9
                        },
                        new
                        {
                            EmployeeId = 11,
                            DepartmentId = 6,
                            EmailId = "sandhiya@aspiresys.com",
                            EmployeeAceNumber = "ACE0011",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Sandhiya",
                            Password = "Pass@12345",
                            ProjectId = 4,
                            RoleId = 9
                        },
                        new
                        {
                            EmployeeId = 12,
                            DepartmentId = 7,
                            EmailId = "mani@aspiresys.com",
                            EmployeeAceNumber = "ACE0012",
                            IsActive = true,
                            IsAdminAccepted = false,
                            IsAdminResponded = false,
                            Name = "Mani",
                            Password = "Pass@12345",
                            ProjectId = 4,
                            RoleId = 10
                        });
                });

            modelBuilder.Entity("IMS.Models.EmployeeAvailability", b =>
                {
                    b.Property<int>("EmployeeAvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeAvailabilityId"), 1L, 1);

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriveId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsInterviewCancelled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInterviewScheduled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeAvailabilityId");

                    b.HasIndex("DriveId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAvailability");

                    b.HasData(
                        new
                        {
                            EmployeeAvailabilityId = 1,
                            DriveId = 1,
                            EmployeeId = 2,
                            From = new DateTime(2022, 7, 7, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 2,
                            DriveId = 2,
                            EmployeeId = 2,
                            From = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 3,
                            DriveId = 5,
                            EmployeeId = 2,
                            From = new DateTime(2022, 5, 7, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 4,
                            CancellationReason = "For Testing",
                            Comments = "Testing comment",
                            DriveId = 5,
                            EmployeeId = 3,
                            From = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = true,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 5,
                            DriveId = 6,
                            EmployeeId = 2,
                            From = new DateTime(2022, 5, 7, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 6,
                            DriveId = 6,
                            EmployeeId = 3,
                            From = new DateTime(2022, 5, 7, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 7,
                            DriveId = 7,
                            EmployeeId = 2,
                            From = new DateTime(2022, 5, 7, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 8,
                            DriveId = 7,
                            EmployeeId = 2,
                            From = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 9,
                            DriveId = 7,
                            EmployeeId = 3,
                            From = new DateTime(2022, 5, 7, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 10,
                            DriveId = 8,
                            EmployeeId = 3,
                            From = new DateTime(2022, 5, 7, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 11,
                            DriveId = 8,
                            EmployeeId = 3,
                            From = new DateTime(2022, 5, 7, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 12,
                            DriveId = 9,
                            EmployeeId = 2,
                            From = new DateTime(2022, 5, 7, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 13,
                            DriveId = 9,
                            EmployeeId = 3,
                            From = new DateTime(2022, 5, 7, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 14,
                            CancellationReason = "Testing",
                            Comments = "Testing Comment",
                            DriveId = 10,
                            EmployeeId = 2,
                            From = new DateTime(2022, 5, 7, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = true,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 15,
                            DriveId = 10,
                            EmployeeId = 3,
                            From = new DateTime(2022, 5, 7, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 16,
                            DriveId = 10,
                            EmployeeId = 3,
                            From = new DateTime(2022, 5, 7, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 17,
                            DriveId = 13,
                            EmployeeId = 5,
                            From = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 18,
                            DriveId = 13,
                            EmployeeId = 6,
                            From = new DateTime(2022, 5, 7, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 19,
                            DriveId = 14,
                            EmployeeId = 5,
                            From = new DateTime(2022, 5, 7, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 20,
                            DriveId = 14,
                            EmployeeId = 6,
                            From = new DateTime(2022, 5, 7, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 21,
                            DriveId = 15,
                            EmployeeId = 5,
                            From = new DateTime(2022, 5, 7, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 22,
                            DriveId = 15,
                            EmployeeId = 5,
                            From = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 23,
                            DriveId = 15,
                            EmployeeId = 6,
                            From = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 24,
                            DriveId = 16,
                            EmployeeId = 6,
                            From = new DateTime(2022, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EmployeeAvailabilityId = 25,
                            DriveId = 16,
                            EmployeeId = 6,
                            From = new DateTime(2022, 5, 7, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            InterviewDate = new DateTime(2022, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsInterviewCancelled = false,
                            IsInterviewScheduled = true,
                            To = new DateTime(2022, 5, 7, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("IMS.Models.EmployeeDriveResponse", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"), 1L, 1);

                    b.Property<int>("DriveId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ResponseType")
                        .HasColumnType("int");

                    b.HasKey("ResponseId");

                    b.HasIndex("DriveId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDriveResponse");

                    b.HasData(
                        new
                        {
                            ResponseId = 5,
                            DriveId = 1,
                            EmployeeId = 1,
                            ResponseType = 1
                        },
                        new
                        {
                            ResponseId = 6,
                            DriveId = 2,
                            EmployeeId = 2,
                            ResponseType = 2
                        },
                        new
                        {
                            ResponseId = 3,
                            DriveId = 2,
                            EmployeeId = 1,
                            ResponseType = 1
                        },
                        new
                        {
                            ResponseId = 4,
                            DriveId = 1,
                            EmployeeId = 2,
                            ResponseType = 1
                        });
                });

            modelBuilder.Entity("IMS.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            IsActive = true,
                            LocationName = "Chennai"
                        },
                        new
                        {
                            LocationId = 2,
                            IsActive = true,
                            LocationName = "Bangalore"
                        },
                        new
                        {
                            LocationId = 3,
                            IsActive = true,
                            LocationName = "Mumbai"
                        },
                        new
                        {
                            LocationId = 4,
                            IsActive = true,
                            LocationName = "Delhi"
                        },
                        new
                        {
                            LocationId = 5,
                            IsActive = true,
                            LocationName = "Noida"
                        },
                        new
                        {
                            LocationId = 6,
                            IsActive = true,
                            LocationName = "Hyderabad"
                        },
                        new
                        {
                            LocationId = 7,
                            IsActive = true,
                            LocationName = "Kochin"
                        },
                        new
                        {
                            LocationId = 8,
                            IsActive = true,
                            LocationName = "Coimbatore"
                        },
                        new
                        {
                            LocationId = 9,
                            IsActive = true,
                            LocationName = "Not Applicable"
                        });
                });

            modelBuilder.Entity("IMS.Models.Pool", b =>
                {
                    b.Property<int>("PoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PoolId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PoolName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("PoolId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Pools");

                    b.HasData(
                        new
                        {
                            PoolId = 1,
                            DepartmentId = 1,
                            IsActive = true,
                            PoolName = "Fresher .NET"
                        },
                        new
                        {
                            PoolId = 2,
                            DepartmentId = 1,
                            IsActive = true,
                            PoolName = "SSE .NET"
                        },
                        new
                        {
                            PoolId = 3,
                            DepartmentId = 1,
                            IsActive = true,
                            PoolName = "SLO .NET"
                        },
                        new
                        {
                            PoolId = 4,
                            DepartmentId = 2,
                            IsActive = true,
                            PoolName = "Fresher JAVA"
                        },
                        new
                        {
                            PoolId = 5,
                            DepartmentId = 2,
                            IsActive = true,
                            PoolName = "SSE JAVA"
                        },
                        new
                        {
                            PoolId = 6,
                            DepartmentId = 2,
                            IsActive = true,
                            PoolName = "SLO JAVA"
                        },
                        new
                        {
                            PoolId = 7,
                            DepartmentId = 3,
                            IsActive = true,
                            PoolName = "Fresher ORACLE"
                        },
                        new
                        {
                            PoolId = 8,
                            DepartmentId = 3,
                            IsActive = true,
                            PoolName = "SSE ORACLE"
                        },
                        new
                        {
                            PoolId = 9,
                            DepartmentId = 3,
                            IsActive = true,
                            PoolName = "SLO ORACLE"
                        },
                        new
                        {
                            PoolId = 10,
                            DepartmentId = 4,
                            IsActive = true,
                            PoolName = "Fresher LAMP"
                        },
                        new
                        {
                            PoolId = 11,
                            DepartmentId = 4,
                            IsActive = true,
                            PoolName = "SSE LAMP"
                        },
                        new
                        {
                            PoolId = 12,
                            DepartmentId = 4,
                            IsActive = true,
                            PoolName = "SLO LAMP"
                        },
                        new
                        {
                            PoolId = 13,
                            DepartmentId = 5,
                            IsActive = true,
                            PoolName = "Fresher BFS"
                        },
                        new
                        {
                            PoolId = 14,
                            DepartmentId = 5,
                            IsActive = true,
                            PoolName = "SSE BFS"
                        },
                        new
                        {
                            PoolId = 15,
                            DepartmentId = 5,
                            IsActive = true,
                            PoolName = "SLO BFS"
                        });
                });

            modelBuilder.Entity("IMS.Models.PoolMembers", b =>
                {
                    b.Property<int>("PoolMembersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PoolMembersId"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PoolId")
                        .HasColumnType("int");

                    b.HasKey("PoolMembersId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PoolId");

                    b.ToTable("PoolMembers");

                    b.HasData(
                        new
                        {
                            PoolMembersId = 1,
                            EmployeeId = 1,
                            IsActive = true,
                            PoolId = 1
                        },
                        new
                        {
                            PoolMembersId = 2,
                            EmployeeId = 2,
                            IsActive = true,
                            PoolId = 1
                        },
                        new
                        {
                            PoolMembersId = 3,
                            EmployeeId = 2,
                            IsActive = true,
                            PoolId = 2
                        },
                        new
                        {
                            PoolMembersId = 4,
                            EmployeeId = 3,
                            IsActive = true,
                            PoolId = 2
                        },
                        new
                        {
                            PoolMembersId = 5,
                            EmployeeId = 4,
                            IsActive = true,
                            PoolId = 3
                        },
                        new
                        {
                            PoolMembersId = 6,
                            EmployeeId = 5,
                            IsActive = true,
                            PoolId = 3
                        },
                        new
                        {
                            PoolMembersId = 7,
                            EmployeeId = 5,
                            IsActive = true,
                            PoolId = 4
                        },
                        new
                        {
                            PoolMembersId = 8,
                            EmployeeId = 6,
                            IsActive = true,
                            PoolId = 4
                        },
                        new
                        {
                            PoolMembersId = 9,
                            EmployeeId = 7,
                            IsActive = true,
                            PoolId = 5
                        });
                });

            modelBuilder.Entity("IMS.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            DepartmentId = 1,
                            IsActive = true,
                            ProjectName = "Interview_Management_NET"
                        },
                        new
                        {
                            ProjectId = 2,
                            DepartmentId = 1,
                            IsActive = true,
                            ProjectName = "Employee_Management_NET"
                        },
                        new
                        {
                            ProjectId = 3,
                            DepartmentId = 1,
                            IsActive = true,
                            ProjectName = "Profile_Management_NET"
                        },
                        new
                        {
                            ProjectId = 4,
                            DepartmentId = 1,
                            IsActive = true,
                            ProjectName = "Banking_NET"
                        },
                        new
                        {
                            ProjectId = 5,
                            DepartmentId = 2,
                            IsActive = true,
                            ProjectName = "Interview_Management_JAVA"
                        },
                        new
                        {
                            ProjectId = 6,
                            DepartmentId = 2,
                            IsActive = true,
                            ProjectName = "Employee_Management_JAVA"
                        },
                        new
                        {
                            ProjectId = 7,
                            DepartmentId = 2,
                            IsActive = true,
                            ProjectName = "Profile_Management_JAVA"
                        },
                        new
                        {
                            ProjectId = 8,
                            DepartmentId = 2,
                            IsActive = true,
                            ProjectName = "Banking_JAVA"
                        },
                        new
                        {
                            ProjectId = 9,
                            DepartmentId = 3,
                            IsActive = true,
                            ProjectName = "Interview_Management_ORACLE"
                        },
                        new
                        {
                            ProjectId = 10,
                            DepartmentId = 3,
                            IsActive = true,
                            ProjectName = "Employee_Management_ORACLE"
                        },
                        new
                        {
                            ProjectId = 11,
                            DepartmentId = 3,
                            IsActive = true,
                            ProjectName = "Profile_Management_ORACLE"
                        },
                        new
                        {
                            ProjectId = 12,
                            DepartmentId = 3,
                            IsActive = true,
                            ProjectName = "Banking_ORACLE"
                        },
                        new
                        {
                            ProjectId = 13,
                            DepartmentId = 4,
                            IsActive = true,
                            ProjectName = "Interview_Management_LAMP"
                        },
                        new
                        {
                            ProjectId = 14,
                            DepartmentId = 4,
                            IsActive = true,
                            ProjectName = "Employee_Management_LAMP"
                        },
                        new
                        {
                            ProjectId = 15,
                            DepartmentId = 4,
                            IsActive = true,
                            ProjectName = "Profile_Management_LAMP"
                        },
                        new
                        {
                            ProjectId = 16,
                            DepartmentId = 4,
                            IsActive = true,
                            ProjectName = "Banking_LAMP"
                        },
                        new
                        {
                            ProjectId = 17,
                            DepartmentId = 5,
                            IsActive = true,
                            ProjectName = "Interview_Management_BFS"
                        },
                        new
                        {
                            ProjectId = 18,
                            DepartmentId = 5,
                            IsActive = true,
                            ProjectName = "Employee_Management_BFS"
                        },
                        new
                        {
                            ProjectId = 19,
                            DepartmentId = 5,
                            IsActive = true,
                            ProjectName = "Profile_Management_BFS"
                        },
                        new
                        {
                            ProjectId = 20,
                            DepartmentId = 5,
                            IsActive = true,
                            ProjectName = "Banking_BFS"
                        },
                        new
                        {
                            ProjectId = 21,
                            DepartmentId = 6,
                            IsActive = true,
                            ProjectName = "Not Applicable"
                        });
                });

            modelBuilder.Entity("IMS.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManagement")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            IsActive = true,
                            IsManagement = false,
                            RoleName = "Software Developer"
                        },
                        new
                        {
                            RoleId = 2,
                            IsActive = true,
                            IsManagement = false,
                            RoleName = "Senior Software Developer"
                        },
                        new
                        {
                            RoleId = 3,
                            IsActive = true,
                            IsManagement = false,
                            RoleName = "Project Manager"
                        },
                        new
                        {
                            RoleId = 4,
                            IsActive = true,
                            IsManagement = false,
                            RoleName = "Module Lead"
                        },
                        new
                        {
                            RoleId = 5,
                            IsActive = true,
                            IsManagement = false,
                            RoleName = "Technical Lead"
                        },
                        new
                        {
                            RoleId = 6,
                            IsActive = true,
                            IsManagement = false,
                            RoleName = "Software Architect"
                        },
                        new
                        {
                            RoleId = 7,
                            IsActive = true,
                            IsManagement = false,
                            RoleName = "Delivery Manager"
                        },
                        new
                        {
                            RoleId = 8,
                            IsActive = true,
                            IsManagement = false,
                            RoleName = "Service Line Owner"
                        },
                        new
                        {
                            RoleId = 9,
                            IsActive = true,
                            IsManagement = false,
                            RoleName = "TAC"
                        },
                        new
                        {
                            RoleId = 10,
                            IsActive = true,
                            IsManagement = false,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("IMS.Models.Drive", b =>
                {
                    b.HasOne("IMS.Models.Employee", "AddedEmployee")
                        .WithMany("AddedEmployeeDrives")
                        .HasForeignKey("AddedBy");

                    b.HasOne("IMS.Models.Department", "Department")
                        .WithMany("DrivesUnderDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Location", "Location")
                        .WithMany("DrivesUnderLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Pool", "Pool")
                        .WithMany("DrivesUnderPool")
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Employee", "UpdatedEmployee")
                        .WithMany("UpdatedEmployeeDrives")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("AddedEmployee");

                    b.Navigation("Department");

                    b.Navigation("Location");

                    b.Navigation("Pool");

                    b.Navigation("UpdatedEmployee");
                });

            modelBuilder.Entity("IMS.Models.Employee", b =>
                {
                    b.HasOne("IMS.Models.Department", "Department")
                        .WithMany("EmployeesUnderDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Project", "Project")
                        .WithMany("EmployeesUnderProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Role", "Role")
                        .WithMany("EmployeesUnderRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Project");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IMS.Models.EmployeeAvailability", b =>
                {
                    b.HasOne("IMS.Models.Drive", "Drive")
                        .WithMany("DriveSoltResponse")
                        .HasForeignKey("DriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Employee", "Employee")
                        .WithMany("EmployeeSlotResponses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drive");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("IMS.Models.EmployeeDriveResponse", b =>
                {
                    b.HasOne("IMS.Models.Drive", "Drive")
                        .WithMany("DriveResponses")
                        .HasForeignKey("DriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Employee", "Employee")
                        .WithMany("EmployeeDriveResponses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drive");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("IMS.Models.Pool", b =>
                {
                    b.HasOne("IMS.Models.Department", "department")
                        .WithMany("Pools")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("IMS.Models.PoolMembers", b =>
                {
                    b.HasOne("IMS.Models.Employee", "Employees")
                        .WithMany("PoolMembers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Pool", "Pools")
                        .WithMany("PoolMembers")
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");

                    b.Navigation("Pools");
                });

            modelBuilder.Entity("IMS.Models.Project", b =>
                {
                    b.HasOne("IMS.Models.Department", "department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("IMS.Models.Department", b =>
                {
                    b.Navigation("DrivesUnderDepartment");

                    b.Navigation("EmployeesUnderDepartment");

                    b.Navigation("Pools");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("IMS.Models.Drive", b =>
                {
                    b.Navigation("DriveResponses");

                    b.Navigation("DriveSoltResponse");
                });

            modelBuilder.Entity("IMS.Models.Employee", b =>
                {
                    b.Navigation("AddedEmployeeDrives");

                    b.Navigation("EmployeeDriveResponses");

                    b.Navigation("EmployeeSlotResponses");

                    b.Navigation("PoolMembers");

                    b.Navigation("UpdatedEmployeeDrives");
                });

            modelBuilder.Entity("IMS.Models.Location", b =>
                {
                    b.Navigation("DrivesUnderLocation");
                });

            modelBuilder.Entity("IMS.Models.Pool", b =>
                {
                    b.Navigation("DrivesUnderPool");

                    b.Navigation("PoolMembers");
                });

            modelBuilder.Entity("IMS.Models.Project", b =>
                {
                    b.Navigation("EmployeesUnderProject");
                });

            modelBuilder.Entity("IMS.Models.Role", b =>
                {
                    b.Navigation("EmployeesUnderRole");
                });
#pragma warning restore 612, 618
        }
    }
}
